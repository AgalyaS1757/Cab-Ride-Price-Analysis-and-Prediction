import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from scipy import stats

# 1. Data Cleaning & Loading
# The file was saved as 'cab_rides (1).csv' after upload.
df = pd.read_csv('cab_rides (1).csv')

# Display the first few rows to confirm it loaded correctly
print("--- Data Loading & Initial Look ---")
print(df.head())
print("\n")

# Check for missing values and data types
print("--- Data Info ---")
df.info()
print("\n")

# Check for duplicate rows
print("--- Checking for Duplicates ---")
print(f"Number of duplicate rows: {df.duplicated().sum()}")
print("\n")

# 2. Key Metrics
# Calculate descriptive statistics for the 'price' column
print("--- Key Metrics for 'price' ---")
print(df['price'].describe())
print(f"Median price: {df['price'].median()}")
print(f"Mode price: {df['price'].mode()[0]}")
print("\n")

# Count unique cab types
print("--- Unique Cab Types ---")
print(df['cab_type'].value_counts())
print("\n")

# 3. Visualization
print("--- Visualization ---")
# Create a bar chart showing the average price by cab type
plt.figure(figsize=(10, 6))
sns.barplot(x='cab_type', y='price', data=df)
plt.title('Average Price by Cab Type')
plt.xlabel('Cab Type')
plt.ylabel('Average Price')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 4. Simple Prediction Model
print("\n--- Simple Prediction Model ---")
# Drop rows with missing values in the 'price' column for the model
df_clean = df.dropna(subset=['price'])
# Select 'distance' as the feature (X) and 'price' as the target (y)
X = df_clean[['distance']]
y = df_clean['price']

# Split the data into a training set and a testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a simple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions and evaluate the model's performance using Mean Absolute Error (MAE)
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"Mean Absolute Error of the linear model: {mae:.2f}")
print("\n")

# 5. A/B Test Simulation
print("--- A/B Test Simulation ---")
# Simulate two groups (A and B) with slightly different success rates
np.random.seed(42)
group_a_successes = np.random.binomial(n=1000, p=0.05, size=1)
group_b_successes = np.random.binomial(n=1000, p=0.06, size=1)

# Perform a t-test to check if the difference is statistically significant
t_stat, p_value = stats.ttest_ind([1]*group_a_successes + [0]*(1000-group_a_successes),
                                  [1]*group_b_successes + [0]*(1000-group_b_successes),
                                  equal_var=False)

print(f"Group A Successes: {group_a_successes[0]}")
print(f"Group B Successes: {group_b_successes[0]}")
print(f"T-statistic: {t_stat:.4f}")
print(f"P-value: {p_value:.4f}")

# Interpret the p-value to draw a conclusion
alpha = 0.05
if p_value < alpha:
    print("Conclusion: The difference between the two groups is statistically significant.")
else:
    print("Conclusion: The difference between the two groups is not statistically significant.")